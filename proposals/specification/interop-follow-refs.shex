# made from interop.shex
# with sed -r 's/iri([*?+]?) *\/\/ *shex:reference (<[^>]+>)/@\2\1/i'
# or in emacs: iri\([*?+]?\) *// *shex:reference \(<[^>]+>\) -> @\2\1

BASE <http://interop.example/shapes#> # placeholder until schema location is set

PREFIX interop: <http://www.w3.org/ns/solid/interop#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX sts: <http://www.w3.org/ns/shapetrees-schema#>
PREFIX shex: <http://www.w3.org/ns/shex>
PREFIX acl: <http://www.w3.org/ns/auth/acl#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>

<#SocialAgentShape> {
  a [ interop:SocialAgent ] ;
  interop:hasRegistrySet                    @<#RegistrySetShape> ;
  interop:hasAuthorizationAgent             @<#ApplicationShape> ;
  interop:hasInbox                          IRI ;
  interop:hasAccessInbox                    IRI
}

<#RegistrySetShape> {
  a [ interop:RegistrySet ] ;
  interop:hasAgentRegistry                  @<#AgentRegistryShape> ;
  interop:hasAccessConsentRegistry          @<#AccessConsentRegistryShape> ;
  interop:hasDataRegistry                   @<#DataRegistryShape>*
}

<#RegistrationShape> {
  $<#CommonRegistrationProperties> (
    interop:registeredBy                    @<#AgentShape> ;
    interop:registeredWith                  @<#ApplicationShape> ;
    interop:registeredAt                    xsd:dateTime ;
    interop:updatedAt                       xsd:dateTime ;
  )
}

<#AgentRegistryShape> {
  a [ interop:AgentRegistry ] ;
  interop:hasRegistration                   @<#AgentRegistrationShape>* ;
}

<#AgentRegistrationShape>
  <#SocialAgentRegistrationShape> OR
  <#ApplicationRegistrationShape>

<#SocialAgentRegistrationShape> {
  a [ interop:SocialAgentRegistration ] ;
  &<#CommonRegistrationProperties> ;
  interop:registeredAgent                   @<#AgentShape> ;
  interop:hasAccessGrant                    @<#AccessGrantShape> ;
  interop:reciprocalRegistration            @<#SocialAgentShape>?
}

<#ApplicationRegistrationShape> {
  a [ interop:ApplicationRegistration ] ;
  &<#CommonRegistrationProperties> ;
  interop:registeredAgent                   @<#AgentShape> ;
  interop:hasAccessGrant                    @<#AccessGrantShape>
}

<#DataRegistryShape> {
  a [ interop:DataRegistry ] ;
  interop:hasRegistration                   @<#DataRegistrationShape>*
}

<#DataRegistrationShape> {
  a [ interop:DataRegistration ] ;
  &<#CommonRegistrationProperties> ;
  interop:registeredShapeTree               @sts:ShapeTree;
}

<#ApplicationShape> {
  a [ interop:Application ] ;
  interop:applicationName                   xsd:string ;
  interop:applicationDescription            xsd:string ;
  interop:applicationAuthor                 @<#AgentShape> ;
  interop:applicationThumbnail              IRI? ;
  interop:hasAccessNeedGroup                @<#AccessNeedGroupShape>*
}

<#AccessNeedGroupShape> {
  a [ interop:AccessNeedGroup ] ;
  interop:hasAccessDecoratorSet             @<#AccessDecoratorSetShape>* ;
  interop:accessNecessity                   [ interop:AccessRequired interop:AccessOptional ] ;
  interop:accessScenario                    [ interop:PersonalAccess interop:SharedAccess ]+ ;
  interop:authenticatesAs                   [ interop:SocialAgent interop:Application ] ;
  interop:hasAccessNeed                     @<#AccessNeedShape>+ ;
}

<#AccessNeedShape> {
  a [ interop:AccessNeed ] ;
  interop:registeredShapeTree               @sts:ShapeTree ;
  interop:accessMode                        @<#AccessModes>+ ;
  interop:creatorAccessMode                 @<#AccessModes>* ;
  interop:accessNecessity                   [ interop:AccessRequired interop:AccessOptional ] ;
  interop:hasDataInstance                   IRI* ;
  interop:inheritsFromNeed                  @<#AccessNeedShape>? ;
}

<#AccessModes> [ acl:Read acl:Write acl:Append acl:Control acl:Create acl:Update acl:Delete ]

<#AccessDecoratorSetShape> {
  a [ interop:AccessDecoratorSet ] ;
  interop:usesLanguage                      xsd:language
}

<#AccessNeedGroupDecoratorShape> {
  a [ interop:AccessNeedGroupDecorator ] ;
  interop:inAccessDecoratorSet              @<#AccessDecoratorSetShape> ;
  interop:hasAccessNeedGroup                @<#AccessNeedGroupShape> ;
  skos:prefLabel                            xsd:string ;
  skos:definition                           xsd:string
}

<#AccessNeedDecoratorShape> {
  a [ interop:AccessNeedDecorator ] ;
  interop:inAccessDecoratorSet              @<#AccessDecoratorSetShape> ;
  interop:hasAccessNeedGroup                @<#AccessNeedGroupShape> ;
  skos:prefLabel xsd:string
}

<#AccessRequestShape> {
  a [interop:AccessRequest] ;
  interop:fromSocialAgent                   @<#SocialAgentShape> ;
  interop:toSocialAgent                     @<#SocialAgentShape> ;
  interop:hasAccessNeedGroup                @<#AccessNeedGroupShape>+
}

<#AccessConsentRegistryShape> {
  a [ interop:AccessConsentRegistry ] ;
  interop:hasRegistration                   @<#AccessConsentShape>*
}

<#AccessConsentShape> {
  a [ interop:AccessConsent ] ;
  interop:registeredBy                      @<#AgentShape> ;
  interop:registeredWith                    @<#ApplicationShape>? ;
  interop:registeredAt                      xsd:dateTime ;
  interop:registeredAgent                   @<#AgentShape> ;
  interop:hasAccessNeedGroup                @<#AccessNeedGroupShape>? ;
  interop:hasDataConsent                    @<#DataConsentShape>+
}

<#DataConsentShape>
  <#DataConsentAllShape> OR
  <#DataConsentAllFromAgentShape> OR
  <#DataConsentAllFromRegistryShape> OR
  <#DataConsentSelectedFromRegistryShape> OR
  <#DataConsentInheritedShape>

<#DataConsentAllShape> {
  a [ interop:DataConsent ] ;
  $<#CommonDataConsentProperties> (
    interop:registeredAgent                 @<#AgentShape> ;
    interop:registeredShapeTree             @sts:ShapeTree ;
    interop:satisfiesAccessNeed             @<#AccessNeedShape>? ;
    interop:accessMode                      @<#AccessModes>+ ;
    interop:creatorAccessMode               @<#AccessModes>* ;
  ) ;
  interop:scopeOfConsent                    [ interop:All ]
}

<#DataConsentAllFromAgentShape> {
  a [ interop:DataConsent ] ;
  &<#CommonDataConsentProperties> ;
  interop:dataOwner                         @<#SocialAgentShape> ;
  interop:scopeOfConsent                    [ interop:AllFromAgent ]
}

<#DataConsentAllFromRegistryShape> {
  a [ interop:DataConsent ] ;
  &<#CommonDataConsentProperties> ;
  interop:dataOwner                         @<#SocialAgentShape> ;
  interop:scopeOfConsent                    [ interop:AllFromRegistry ] ;
  interop:hasDataRegistration               @<#DataRegistrationShape>
}

<#DataConsentSelectedFromRegistryShape> {
  a [ interop:DataConsent ] ;
  &<#CommonDataConsentProperties> ;
  interop:dataOwner                         @<#SocialAgentShape> ;
  interop:scopeOfConsent                    [ interop:SelectedFromRegistry ] ;
  interop:hasDataRegistration               @<#DataRegistrationShape> ;
  interop:hasDataInstance                   IRI+
}

<#DataConsentInheritedShape> {
  a [ interop:DataConsent ] ;
  &<#CommonDataConsentProperties> ;
  interop:dataOwner                         @<#SocialAgentShape> ;
  interop:scopeOfConsent                    [ interop:Inherited ] ;
  interop:hasDataRegistration               @<#DataRegistrationShape>? ;
  interop:inheritsFromConsent               @<#DataConsentShape>
}

<#AccessGrantShape> {
  a [ interop:AccessGrant ] ;
  interop:registeredBy                      @<#AgentShape> ;
  interop:registeredWith                    @<#ApplicationShape>? ;
  interop:registeredAt                      xsd:dateTime ;
  interop:registeredAgent                   @<#AgentShape> ;
  interop:hasAccessNeedGroup                @<#AccessNeedGroupShape> ;
  interop:hasDataGrant                      @<#DataGrant>+ ;
}

<#DataGrantShape>
  <#DataGrantAllFromRegistryShape> OR
  <#DataGrantSelectedFromRegistryShape> OR
  <#DataGrantInheritedShape>

<#DataGrantAllFromRegistryShape> {
  ( a [ interop:DataGrant ]
    |
    a [ interop:DelegatedDataGrant ] ;
    interop:delegationOfGrant               @<#DataGrantShape> ) ;
  &<#CommonDataConsentProperties> ;
  interop:dataOwner                         @<#AgentShape> ;
  interop:hasDataRegistration               @<#DataRegistrationShape> ;
  interop:scopeOfGrant                      [ interop:AllFromRegistry ]
}

<#DataGrantSelectedFromRegistryShape> {
  ( a [ interop:DataGrant ]
    |
    a [ interop:DelegatedDataGrant ] ;
    interop:delegationOfGrant               @<#DataGrantShape> ) ;
  &<#CommonDataConsentProperties> ;
  interop:dataOwner                         @<#AgentShape> ;
  interop:hasDataRegistration               @<#DataRegistrationShape> ;
  interop:scopeOfGrant                      [ interop:SelectedFromRegistry ] ;
  interop:hasDataInstance                   IRI+
}

<#DataGrantInheritedShape> {
  ( a [ interop:DataGrant ]
    |
    a [ interop:DelegatedDataGrant ] ;
    interop:delegationOfGrant               @<#DataGrantShape> ) ;
  &<#CommonDataConsentProperties> ;
  interop:dataOwner                         @<#AgentShape> ;
  interop:hasDataRegistration               @<#DataRegistrationShape> ;
  interop:scopeOfGrant                      [ interop:Inherited ] ;
  interop:inheritsFromGrant                 @<#DataGrantShape> ;
}

<#DataGrantScopes> [
  interop:SelectedFromRegistry
  interop:AllFromRegistry
  interop:AllFromAgent
  interop:All
  interop:Inherited
  interop:NoAccess
]

<#AccessReceiptShape> {
  a [interop:AccessReceipt] ;
  interop:providedAt                        xsd:dateTime ;
  interop:fromSocialAgent                   @<#SocialAgentShape> ;
  interop:viaSocialAgent                    @<#SocialAgentShape> ;
  interop:hasSocialAgentRegistration        @<#SocialAgentRegistration>
}

sts:ShapeTree {
}
