Remote Data Registration {#remote}
=====================

## Overview ## {#remote-overview}

Remote Data Registration lets [=Agents=] keep track of data that other
[=Agents=] have shared with them. 

[=Access Receipts=] detailing the data shared by
other [=Agents=] are used to update the [=Remote Data Registry=] with
pointers to that remote, shared data.

## Data Model ## {#remote-datamodel}

### Summary ### {#remote-datamodel-summary}

<figure id="fig-remote-model">
  <img src="diagrams/remote-model.svg" width=100%/>
  <figcaption>Data model for the [=Remote Data Registry=]</figcaption>
</figure>

An [=Agent=] links to [=Remote Data Registry Sets=] via the
[interop:hasRemoteDataRegistrySet](interop.ttl#hasAccessReceiptRegistrySet)
property.

A [=Remote Data Registry Set=] links to any number of
[=Remote Data Registries=] via
the [interop:hasRegistry](interop.ttl#hasRegistry) property.

A [=Remote Data Registry=] links to any number of registered
[=Remote Data Registrations=] via the
[interop:hasRemoteDataRegistration](interop.ttl#hasRemoteDataRegistration) property.

A [=Remote Data Registration=] organizes
[=Remote Agent Data Registrations=] by [=shape tree=],
via the 
[interop:hasRemoteAgentDataRegistration](interop.ttl#hasRemoteAgentDataRegistration)
property.

A [=Remote Agent Data Registration=] represents a pointer to a [=Data Registration=]
controlled by another [=Agent=]. Consequently, it also links to one or more
[=Remote Agent Data Instances=] via the
[interop:hasRemoteAgentDataInstance](interop.ttl#hasRemoteAgentDataInstance) 
property.

<figure id="fig-remote-agent">
  <figcaption>[=Agent=] at https://alice.pod.example/profile/id#me
  linking to an [=Remote Data Registry Set=]</figcaption>
  <pre highlight="turtle">
  <#me>
    a interop:Agent;
    interop:hasRemoteDataRegistrySet &lt;https://alice.pod.example/profile/remote#set&gt; .
  </pre>
  </figure>
</figure>

<figure id ="fig-remote-registry-set">
   <figcaption>A [=Remote Data Registry Set=] at
   https://bob.pod.example/profile/remote#set linking to two different
  [=Remote Data Registries=]</figcaption>
  <pre highlight="turtle">
  <#set>
    a interop:RemoteDataRegistrySet;
    interop:hasRegistry 
      &lt;https://alice.pod.example/remote/#registry&gt; ,
      &lt;https://alice.otherpod.example/remote/#registry&gt; .
  </pre>
</figure>

<figure id="fig-remote-registry">
  <figcaption>An [=Remote Data Registry=] at
  https://alice.pod.example/remote/#registry
  linking to several [=Remote Data Registrations=]
  </figcaption>
  <pre highlight="turtle">
  <#registry>
    a interop:RemoteDataRegistry ;
    interop:hasRemoteDataRegistration
      &lt;9e80126d-178f-4a03-851b-c731194a3b0d/#registration&gt; ,
      &lt;833ab294-9f29-4059-b76f-00efc251f2dd/#registration&gt; ,
      &lt;656a8fd0-7cac-46a3-8b84-06f227822656/#registration&gt; .      
  </pre>
</figure>

<figure id="fig-remote-registration-set">
  <figcaption>A [=Remote Data Registration=] at
  https://alice.pod.example/remote/9e80126d-178f-4a03-851b-c731194a3b0d/#set
  linking to several [=Remote Data Registrations=] for a given [=shape tree=]
  </figcaption>
  <pre highlight="turtle">
  <#registration>
    a interop:RemoteDataRegistration ;
    interop:registeredBy &lt;https://alice.pod.example/profile/id#me&gt; ;
    interop:registeredWith &lt;https://trusted.example/id#agent&gt; ;
    interop:registeredAt "2020-09-05T06:15:01Z"^^xsd:dateTime ;
    interop:updatedAt "2020-09-05T06:15:01Z"^^xsd:dateTime ;
    interop:providedAt "2020-09-05T06:16:01Z"^^xsd:dateTime ;    
    interop:registeredShapeTree project:ProjectTree ;
    interop:hasRemoteAgentDataRegistration
      &lt;f0ebbd29-3a5a-4770-af29-cdb7693066b4/#registration&gt; ,
      &lt;bedcc388-f303-4059-8645-2e93bf61e9f3/#registration&gt; .
  </pre>
</figure>

<figure id="fig-remote-agent-registration">
  <figcaption>A [=Remote Agent Data Registration=] at
  https://alice.pod.example/remote/9e80126d-178f-4a03-851b-c731194a3b0d/f0ebbd29-3a5a-4770-af29-cdb7693066b4/#registration
  </figcaption>
  <pre highlight="turtle">
  <#registration>
    a interop:RemoteAgentDataRegistration ;
    interop:registeredBy &lt;https://alice.pod.example/profile/id#me&gt; ;
    interop:registeredWith &lt;https://trusted.example/id#agent&gt; ;
    interop:registeredAt "2020-09-05T06:15:01Z"^^xsd:dateTime ;
    interop:updatedAt "2020-09-05T06:15:01Z"^^xsd:dateTime ;
    interop:providedAt "2020-09-05T06:16:01Z"^^xsd:dateTime ;
    interop:hasDataReceipt 
      &lt;https://alice.pod.example/receipts/fa6d6553-0308-4abd-bce6-888df653695a#project-receipt&gt; ;
    interop:hasDataRegistration 
      &lt;https://bob.pod.example/data/project-tree/#registration&gt; ;
    interop:registeredShapeTree project:ProjectTree ;
    interop:scopeOfGrant interop:SelectedInstances ;
    interop:accessMode acl:Read, acl:Write ;
    interop:hasRemoteDataInstance 
      &lt;cd04e76b-d64d-4cea-aacf-fb248a295002#instance&gt; ,
      &lt;9506b58f-3c36-4c0c-a698-712baf478deb#instance&gt; .
  </pre>
</figure>

<figure id="fig-remote-agent-data-instance">
  <figcaption>A [=Remote Agent Data Instance=] at
  https://alice.pod.example/remote/f0ebbd29-3a5a-4770-af29-cdb7693066b4/cd04e76b-d64d-4cea-aacf-fb248a295002
  </figcaption>
  <pre highlight="turtle">
  <#registration>
    a interop:RemoteAgentDataInstance ;
    interop:registeredAt "2020-09-05T06:15:01Z"^^xsd:dateTime ;
    interop:updatedAt "2020-09-05T06:15:01Z"^^xsd:dateTime ;
    interop:providedAt "2020-09-05T06:16:01Z"^^xsd:dateTime ;
    interop:hasDataReceipt 
      &lt;https://alice.pod.example/receipts/fa6d6553-0308-4abd-bce6-888df653695a#project-receipt&gt; ;
    interop:registeredShapeTree project:ProjectTree ;
    interop:accessMode acl:Read, acl:Write ;
    interop:hasDataInstance 
      &lt;https://bob.pod.example/data/project-tree/project-1/#project&gt; .
  </pre>
</figure>

### Remote Data Registry Set ### {#datamodel-remote-registry-set}

A <dfn>Remote Data Registry Set</dfn> is a [=Registry Set=] specifically
made up of [=Remote Data Registries=].

<table class="classinfo data" align="left" id="classRemoteDataRegistrySet">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th colspan=3 text-align=left>
        [RemoteDataRegistrySet](interop.ttl#RemoteDataRegistrySet)
        a rdfs:subClassOf [[#datamodel-agent|RegistrySet]]
      </th>
    </tr>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>hasRegistry</td>
      <td>Registry</td>
      <td>Link to associated [=Remote Data Registries=]</td>
    </tr>
  </tbody>
</table>

The [RemoteDataRegistrySetShape](#shexRemoteDataRegistrySet) is used to
validate an instance of the
[RemoteDataRegistrySet](#classRemoteDataRegistrySet) class.

<pre highlight="turtle" id="shexRemoteDataRegistrySet">
<#RemoteDataRegistrySetShape> {
  a [ interop:RemoteDataRegistrySet ] ;
  interop:hasRegistry IRI+
}
</pre>

The [RemoteDataRegistrySetTree](interop.tree#RemoteDataRegistrySetTree)
is assigned to a resource to ensure it will validate against the
[RemoteDataRegistrySetShape](#shexRemoteDataRegistrySet).

<pre highlight="turtle" id="treeRemoteDataRegistrySet">
<#RemoteDataRegistrySetTree>
  a st:ShapeTree;
  st:expectsType st:ShapeTreeResource ;
  st:validatedBy &lt;interops#RemoteDataRegistrySetShape&gt; .
</pre>

### Remote Data Registry ### {#datamodel-remote-data-registry}

A <dfn>Remote Data Registry</dfn> is a collection of
[=Remote Data Registrations=] stored in a specific location in a [=pod=].

<table class="classinfo data" align="left" id="classRemoteDataRegistry">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th colspan=3>
        [RemoteDataRegistry](interop.ttl#RemoteDataRegistry)
        a rdfs:subClassOf [Registry](interop.ttl#Registry)
      </th>
    </tr>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>hasRemoteDataRegistration</td>
      <td>[RemoteDataRegistration](interop.ttl#RemoteDataRegistration)</td>
      <td>Link to associated [=Remote Data Registrations=]</td>
    </tr>
  </tbody>
</table>

The [RemoteDataRegistryShape](#shexRemoteDataRegistry) is used to
validate an instance of the
[RemoteDataRegistry](#classRemoteDataRegistry) class.

<pre highlight="turtle" id="shexRemoteDataRegistry">
<#RemoteDataRegistryShape> {
  a [ interop:RemoteDataRegistry ] ;
  interop:hasRemoteDataRegistration IRI* 
}
</pre>

The [RemoteDataRegistryTree](interop.tree#RemoteDataRegistryTree)
is assigned to a container resource to ensure that it will validate against the
[RemoteDataRegistryShape](#shexRemoteDataRegistry), and contain only
conformant instances of the
[RemoteDataRegistrationTree](#treeRemoteDataRegistration).

<pre highlight="turtle" id="treeRemoteDataRegistry">
<#RemoteDataRegistryTree>
  a st:ShapeTree;
  st:expectsType st:ShapeTreeContainer ;
  st:validatedBy &lt;interops#RemoteDataRegistryShape&gt; ;
  st:contains <#RemoteDataRegistrationTree> ,
              st:AllowNone .
</pre>

### Remote Data Registration ### {#datamodel-remote-data-registration}

A <dfn>Remote Data Registration</dfn> is a collection of
[=Remote Agent Data Registrations=] that are all associated with the same
type of [=shape tree=] via `interop:registeredShapeTree`. 
It allows [=Remote Agent Data Registrations=] associated with a specific
[=shape tree=] to be organized together, creating
an important authorization boundary that can be used to grant access
to all remote data for a given [=shape tree=] from any [=Agents=].

<table class="classinfo data" align="left" id="classRemoteDataRegistration">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th colspan=3>
        [RemoteDataRegistration](interop.ttl#RemoteDataRegistration)
        a rdfs:subClassOf [Registration](interop.ttl#Registration)
      </th>
    </tr>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>registeredBy</td>
      <td>[Agent](#classAgent)</td>
      <td>[=Agent=] that registered the [=Remote Data Registration=]</td>
    </tr>
    <tr>
      <td>registeredWith</td>
      <td>[Application](#classApplication)</td>
      <td>[=Application=] used to create the [=Remote Data Registration=]</td>
    </tr>
    <tr>
      <td>registeredAt</td>
      <td>xsd:dateTime</td>
      <td>Date and time the [=Remote Data Registration=] was created</td>
    </tr>
    <tr>
      <td>updatedAt</td>
      <td>xsd:dateTime</td>
      <td>Date and time the [=Remote Data Registration=] was updated</td>
    </tr>
    <tr>
      <td>registeredShapeTree</td>
      <td>st:ShapeTree</td>
      <td>Associated shape tree that all linked 
      [=Remote Agent Data Registrations=] must conform to</td>
    </tr>
    <tr>
      <td>hasRemoteAgentDataRegistration</td>
      <td>[RemoteAgentDataRegistration](interop.ttl#RemoteAgentDataRegistration)</td>
      <td>Link to associated [=Remote Agent Data Registrations=]</td>
    </tr>
  </tbody>
</table>

The [RemoteDataRegistrationShape](#shexRemoteDataRegistration) is used to
validate an instance of the
[RemoteDataRegistration](#classRemoteDataRegistration) class.

<pre highlight="turtle" id="shexRemoteDataRegistration">
<#RemoteDataRegistrationShape> {
  a [ interop:RemoteDataRegistration ] ;
  interop:registeredBy IRI ;
  interop:registeredWith IRI ;
  interop:registeredAt xsd:dateTime ;
  interop:updatedAt xsd:dateTime ;  
  interop:registeredShapeTree IRI 
  interop:hasRemoteAgentDataRegistration IRI* ;
}
</pre>

The [RemoteDataRegistrationTree](interop.tree#RemoteDataRegistrationTree)
is assigned to a container resource to ensure that it will validate against the
[RemoteDataRegistrationShape](#shexRemoteDataRegistration), and contain 
only conformant instances of the
[RemoteAgentDataRegistrationTree](#treeRemoteAgentDataRegistration).

<pre highlight="turtle" id="treeRemoteDataRegistration">
<#RemoteDataRegistrationTree>
  a st:ShapeTree;
  st:expectsType st:ShapeTreeContainer ;
  st:validatedBy &lt;interops#RemoteDataRegistrationShape&gt; ;
  st:contains <#RemoteAgentDataRegistrationTree> ,
              st:AllowNone .
</pre>

### Remote Agent Data Registration ### {#datamodel-remote-agent-data-registration}

An [=Agent=] maintains a <dfn>Remote Agent Data Registration</dfn> to represent
a [=Data Registration=] that another [=Agent=] has shared with them. It
may represent access to the entire [=Data Registration=], or only to a
select group of [=Remote Agent Data Instances=] within.

A [=Remote Agent Data Registration=] is created when an [=Agent=] receives an
[=Access Receipt=] from another [=Agent=] that includes access to a given
[=Data Registration=].

* A [=Remote Agent Data Registration=] MUST be associated with a [=Data Receipt=]
* If an [=Access Receipt=] with a corresponding [=Data Receipt=] is received
    that changes the access to a shared [=Data Registration=], the
    corresponding [=Remote Agent Data Registration=] MUST be updated, and
    removed altogether if that access is removed.

<table class="classinfo data" align="left" id="classRemoteAgentDataRegistration">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th colspan=3>
        [RemoteAgentDataRegistration](interop.ttl#RemoteAgentDataRegistration)
        a rdfs:subClassOf [Registration](interop.ttl#Registration)
      </th>
    </tr>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>registeredBy</td>
      <td>[Agent](#classAgent)</td>
      <td>[=Agent=] that registered the [=Remote Agent Data Registration=]</td>
    </tr>
    <tr>
      <td>registeredWith</td>
      <td>[Application](#classApplication)</td>
      <td>[=Application=] used to create the [=Remote Agent Data Registration=]</td>
    </tr>
    <tr>
      <td>registeredAt</td>
      <td>xsd:dateTime</td>
      <td>Date and time the [=Remote Agent Data Registration=] was created</td>
    </tr>
    <tr>
      <td>updatedAt</td>
      <td>xsd:dateTime</td>
      <td>Date and time the [=Remote Agent Data Registration=] was updated</td>
    </tr>
    <tr>
      <td>providedAt</td>
      <td>xsd:dateTime</td>
      <td>When the [=Remote Agent Data Instance=] was shared by remote [=Agent=]</td>
    </tr>
    <tr>
      <td>hasDataRegistration</td>
      <td>[DataRegistration](#classDataRegistration)</td>
      <td>Link to the [=Data Registration=] that was shared</td>
    </tr>
    <tr>
      <td>registeredShapeTree</td>
      <td>st:ShapeTree</td>
      <td>Shape tree associated with the shared [=Data Registration=]</td>
    </tr>
    <tr>
      <td>scopeOfGrant</td>
      <td> interop:AllInstances, interop:InheritInstances,
      interop:SelectedInstances, interop:NoAccess</td>
      <td>Identifies the scope of access that was granted
        <ul>
          <li>interop:AllInstances - Scope includes
              access to all [=Data Instances=] of the shared
              [=Data Registration=]</li>
          <li>interop:InheritInstances - Scope includes
              access to [=Data Instances=] inherited by
              instances selected in the [=Data Receipt=] linked via
              interop:inheritsFrom</li>
          <li>interop:SelectedInstances - Scope includes
              access only to those [=Data Instances=] specifically
              selected by the [=Agent=]</li>
          <li>interop:NoAccess - No access is granted</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td>accessMode</td>
      <td>acl:Read, acl:Write, acl:Control, acl:Append</td>
      <td>Access modes granted on the shared [=Data Registration=]</td>
    </tr>
    <tr>
      <td>hasRemoteAgentDataInstance</td>
      <td>[RemoteAgentDataInstance](#classRemoteAgentDataInstance)</td>
      <td>Link to [=Remote Agent Data Instance=] associated with the
      [=Remote Agent Data Registration=]</td>
    </tr>
    <tr>
      <td>hasDataReceipt</td>
      <td>[DataReceipt](#classDataReceipt)</td>
      <td>Link to [=Data Receipt=] that granted this shared access</td>
    </tr>
  </tbody>
</table>

The [RemoteAgentDataRegistrationShape](#shexRemoteAgentDataRegistration) 
is used to validate an instance of the
[RemoteAgentDataRegistration](#classRemoteAgentDataRegistration) class.

<pre highlight="turtle" id="shexRemoteAgentDataRegistration">
<#RemoteAgentDataRegistration> {
  a [interop:RemoteAgentDataRegistration] ;
  interop:registeredBy IRI ;
  interop:registeredWith IRI ;
  interop:registeredAt xsd:dateTime ;
  interop:updatedAt xsd:dateTime ;
  interop:providedAt xsd:dateTime ;
  # interop:hasRemoteAgent IRI ;
  interop:hasDataRegistration IRI ;       
  interop:registeredShapeTree IRI ;
  interop:scopeOfGrant @<#:DataGrantScopes>+ ;
  interop:accessMode @<#:AccessModes>+ ;
  interop:hasRemoteDataInstance IRI* ;    
  interop:hasDataReceipt IRI+ ;         
}
</pre>

The [RemoteAgentDataRegistrationTree](interop.tree#RemoteAgentDataRegistrationTree)
is assigned to a resource via the
[RemoteDataRegistrationTree](#treeRemoteDataRegistration), and ensures
that the assigned resource will validate against the
[RemoteAgentDataRegistrationShape](#shexRemoteAgentDataRegistration).

<pre highlight="turtle" id="treeRemoteAgentDataRegistration">
<#RemoteAgentDataRegistrationTree>
  a st:ShapeTree;
  st:expectsType st:ShapeTreeContainer ;
  st:validatedBy &lt;interops#RemoteAgentDataRegistrationShape&gt; ;
  st:contains &lt;#RemoteAgentDataInstanceTree&gt; ,
              st:AllowNone .
</pre>

### Remote Agent Data Instance ### {#datamodel-remote-agent-data-instance}

An [=Agent=] maintains a <dfn>Remote Agent Data Instance</dfn> to represent
a [=Data Instance=] that another [=Agent=] has shared with them.

A [=Remote Agent Data Instance=] is created when an [=Agent=] receives an
[=Access Receipt=] from another [=Agent=] that includes access to a specific
[=Data Instance=].

* A [=Remote Agent Data Instance=] MUST be associated with a [=Data Receipt=]
* If an [=Access Receipt=] is received with a corresponding [=Data Receipt=]
    that changes the access to a shared
    [=Data Instance=], the corresponding [=Remote Agent Data Instance=]
    MUST be updated, and removed altogether if that access is removed.

<table class="classinfo data" align="left" id="classRemoteAgentDataInstance">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th colspan=3>
        [RemoteAgentDataInstance](interop.ttl#RemoteAgentDataInstance)
      </th>
    </tr>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>registeredAt</td>
      <td>xsd:dateTime</td>
      <td>When the [=Remote Agent Data Instance=] was created</td>
    </tr>
    <tr>
      <td>updatedAt</td>
      <td>xsd:dateTime</td>
      <td>When the [=Remote Agent Data Instance=] was last updated</td>
    </tr>
    <tr>
      <td>providedAt</td>
      <td>xsd:dateTime</td>
      <td>When the [=Remote Agent Data Instance=] was shared by remote [=Agent=]</td>
    </tr>
    <tr>
      <td>registeredShapeTree</td>
      <td>st:ShapeTree</td>
      <td>Shape tree associated with the shared [=Data Instance=]</td>
    </tr>
    <tr>
      <td>hasDataInstance</td>
      <td>[=Data Instance=]</td>
      <td>Link to [=Data Instance=] associated with the
      [=Remote Agent Data Instance=]</td>
    </tr>
    <tr>
      <td>accessMode</td>
      <td>acl:Read, acl:Write, acl:Control, acl:Append</td>
      <td>Access modes granted on the shared [=Data Instance=]</td>
    </tr>
    <tr>
      <td>hasDataReceipt</td>
      <td>[DataReceipt](#classDataReceipt)</td>
      <td>Link to [=Data Receipt=] that granted this shared access</td>
    </tr>
  </tbody>
</table>

The [RemoteAgentDataInstanceShape](#shexRemoteAgentDataInstance) is used to
validate an instance of the
[RemoteAgentDataInstance](#classRemoteAgentDataInstance) class.

<pre highlight="turtle" id="shexRemoteAgentDataInstance">
<#RemoteAgentDataInstance> {
  a [interop:RemoteAgentDataInstance] ;  
  interop:registeredAt xsd:dateTime ;
  interop:registeredAt xsd:dateTime ;
  interop:providedAt xsd:dateTime ;
  interop:registeredShapeTree IRI ;       # Associated shape tree
  interop:hasDataInstance IRI ; # Remote Data Instance
  interop:accessMode @<#:AccessModes>+ ;
  interop:hasDataReceipt IRI+ ;         # Associated data receipts
}
</pre>

The [RemoteAgentDataInstanceTree](interop.tree#RemoteAgentDataInstanceTree)
is assigned to a resource via the
[RemoteAgentDataInstanceTree](#treeRemoteAgentDataInstance), and ensures
that the assigned resource will validate against the
[RemoteAgentDataInstanceShape](#shexRemoteAgentDataInstance).

<pre highlight="turtle" id="treeRemoteAgentDataInstance">
<#RemoteAgentDataInstanceTree>
  a st:ShapeTree;
  st:expectsType st:ShapeTreeResource ;
  st:validatedBy &lt;interops#RemoteAgentDataInstanceShape&gt; .
</pre>

## Resource Hierarchy ## {#remote-hierarchy}

<table class="data tree" align="left">
  <col>
  <col>
  <col>
  <col>
  <thead>
    <tr>
      <th>Resource</th>
      <th>Class</th>
      <th>Shape</th>
      <th>Shape Tree</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>`/profile/`</td>
      <td>-</td>
      <td>-</td>
      <td>[ProfileTree](#treeAgent)</td>
    </tr>
    <tr>
      <td>`-- remote#set`</td>
      <td>[RemoteDataRegistrySet](#classRemoteDataRegistrySet)</td>
      <td>[RemoteDataRegistrySetShape](#shexRemoteDataRegistrySet)</td>
      <td>[RemoteDataRegistrySetTree](#treeRemoteDataRegistrySet)</td>
    </tr>
    <tr>
      <td>`/remote/#registry`</td>
      <td>[RemoteDataRegistry](#classRemoteDataRegistry)</td>
      <td>[RemoteDataRegistryShape](#shexRemoteDataRegistry)</td>
      <td>[RemoteDataRegistryTree](#treeRemoteDataRegistry)</td>
    </tr>
    <tr>
      <td>`-- 9e80126d...0d/#registration`</td>
      <td>[RemoteDataRegistration](#classRemoteDataRegistration)</td>
      <td>[RemoteDataRegistrationShape](#shexRemoteDataRegistration)</td>
      <td>[RemoteDataRegistrationTree](#treeRemoteDataRegistration)</td>
    </tr>
    <tr>
      <td>`---- f0ebbd29...b4/#reg...`</td>
      <td>[RemoteAgentDataRegistration](#classRemoteAgentDataRegistration)</td>
      <td>[RemoteAgentDataReg...](#shexRemoteAgentDataRegistration)</td>
      <td>[RemoteAgentDataReg...](#treeRemoteAgentDataRegistration)</td>
    </tr>
    <tr>
      <td>`------ cd04e76b...02#instance`</td>
      <td>[RemoteAgentDataInstance](#classRemoteAgentDataInstance)</td>
      <td>[RemoteAgentDataIns...](#shexRemoteAgentDataInstance)</td>
      <td>[RemoteAgentDataIns...](#treeRemoteAgentDataInstance)</td>
    </tr>
    <tr>
      <td>`------ 9506b58f...eb#instance`</td>
      <td>[RemoteAgentDataInstance](#classRemoteAgentDataInstance)</td>
      <td>[RemoteAgentDataIns...](#shexRemoteAgentDataInstance)</td>
      <td>[RemoteAgentDataIns...](#treeRemoteAgentDataInstance)</td>
    </tr>
    <tr>
      <td>`---- bedcc388...f3/#reg...`</td>
      <td>[RemoteAgentDataRegistration](#classRemoteAgentDataRegistration)</td>
      <td>[RemoteAgentDataReg...](#shexRemoteAgentDataRegistration)</td>
      <td>[RemoteAgentDataReg...](#treeRemoteAgentDataRegistration)</td>
    </tr>
    <tr>
      <td>`-- 833ab294...dd/#registration`</td>
      <td>[RemoteDataRegistration](#classRemoteDataRegistration)</td>
      <td>[RemoteDataRegistrationShape](#shexRemoteDataRegistration)</td>
      <td>[RemoteDataRegistrationTree](#treeRemoteDataRegistration)</td>
    </tr>
    <tr>
      <td>`---- 265dff0c...12/#reg...`</td>
      <td>[RemoteAgentDataRegistration](#classRemoteAgentDataRegistration)</td>
      <td>[RemoteAgentDataReg...](#shexRemoteAgentDataRegistration)</td>
      <td>[RemoteAgentDataReg...](#treeRemoteAgentDataRegistration)</td>
    </tr>
    <tr>
      <td>`-- 656a8fd0...56/#registration`</td>
      <td>[RemoteDataRegistration](#classRemoteDataRegistration)</td>
      <td>[RemoteDataReg...](#shexRemoteDataRegistration)</td>
      <td>[RemoteDataReg...](#treeRemoteDataRegistration)</td>
    </tr>
    <tr>
      <td>`---- f68e95eb...15/#reg...`</td>
      <td>[RemoteAgentDataRegistration](#classRemoteAgentDataRegistration)</td>
      <td>[RemoteAgentDataReg...](#shexRemoteAgentDataRegistration)</td>
      <td>[RemoteAgentDataReg...](#treeRemoteAgentDataRegistration)</td>
    </tr>
  </tbody>
</table>

The [=Remote Data Registry Set=] and the [=Remote Data Registry=]
<em class="rfc2119">MAY</em> or <em class="rfc2119">MAY NOT</em>
be on the same [=pod=].

[=Remote Data Registry Set=] and [=Remote Data Registry=] resources
<em class="rfc2119">MAY</em> use any resource or subject names.

[=Remote Data Registrations=], [=Remote Agent Data Registrations=], and 
[=Remote Agent Data Instances=] <em class="rfc2119">MUST</em> 
use \[UUIDs](https://www.ietf.org/rfc/rfc4122.txt)
for resource names.

[=Remote Agent Data Registrations=] are organized under 
[=Remote Data Registrations=] by `interop:registeredShapeTree` to
provide rational boundaries for authorization.

## Operations ## {#remote-operations}

* [[#remote-update]] - Updates a [=Remote Data Registry=] based on the contents 
    of an [=Access Receipt=]
* [[#remote-createremotedr]] - Create a new [=Remote Data Registration=]
* [[#remote-loadremotedr]] - Lookup a [=Remote Data Registration=] by [=shape tree=]
* [[#remote-createremoteadr]] - Create a new [=Remote Agent Data Registration=]
* [[#remote-createremoteadi]] - Create a new [=Remote Agent Data Instances=]
* [[#remote-updateremoteadr]] - Update a specific [=Remote Agent Data Registration=]
* [[#remote-loadremoteadr]] - Lookup a [=Remote Agent Data Registration=] by URI
    of the shared [=Data Registration=]

### Update Remote Data ### {#remote-update}

<table class="data operation" align="left">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr><th colspan=2>Description</th></tr>
  </thead>
  <tbody>
    <tr>
      <td colspan=2>
      This operation updates a [=Remote Data Registry=] `REGISTRY` based on
      an input [=Access Receipt=] `RECEIPT`.
      </td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Inputs</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>`RECEIPT`</td>
      <td>An [=Access Receipt=] representing data shared with an [=Agent=]</td>
    </tr>
    <tr>
      <td>`REGISTRY`</td>
      <td>A [=Remote Data Registry=] for the [=Agent=]</td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Outputs</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>[=Access Receipt=]</td>
      <td>Updated with remote data associations</td>
    </tr>
  </tbody>
</table>

<div class="opdetails">

1. For each [=Data Receipt=] `DRECEIPT` linked via `RECEIPT hasDataReceipt`
    1. Let `REMOTEDR` be a [=Remote Agent Data Registration=] returned from
        calling [[#remote-loadremoteadr]] with inputs:
        `DRECEIPT hasRegistration`, `REGISTRY`
        1. If `REMOTEADR` is not missing
            1. Call [[#remote-updateremoteadr]] with inputs:
                `REMOTEADR`, `DRECEIPT`, `RECEIPT`
        1. If `REMOTEADR` is missing
            1. Next if `DRECEIPT scopeOfGrant` is `interop:NoAccess`
            1. Call [[#remote-createremoteadr]] with inputs:
                `DRECEIPT`, `RECEIPT`, `REGISTRY`

</div>

### Create Remote Agent Data Registration ### {#remote-createremoteadr}

<table class="data operation" align="left">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr><th colspan=2>Description</th></tr>
  </thead>
  <tbody>
    <tr>
      <td colspan=2>
      Creates a [=Remote Agent Data Registration=] based on
      an input [=Data Receipt=] `DRECEIPT` in a [=Remote Data Registry=] 
      `REGISTRY`.
      </td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Inputs</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>`DRECEIPT`</td>
      <td>A [=Data Receipt=] that will correspond with the created 
      [=Remote Agent Data Registration=]</td>
    </tr>
    <tr>
      <td>`RECEIPT`</td>
      <td>The [=Access Receipt=] that `DRECEIPT` belongs to</td>
    </tr>
    <tr>
      <td>`REGISTRY`</td>
      <td>A [=Remote Data Registry=] for the [=Agent=]</td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Outputs</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>[=Remote Agent Data Registration=]</td>
      <td>Created upon success</td>
    </tr>
  </tbody>
</table>

<div class="opdetails">


1. <em class="rfc2119">MUST</em> return error if
    `DRECEIPT scopeOfGrant` includes `interop:SelectedInstances` or
    `interop:inheritInstances` and `DRECEIPT hasDataInstance` is empty
1. Let `RDREG` be a [=Remote Data Registration=] returned by 
    [[#remote-loadremotedr]] with inputs: `DRECEIPT registeredShapeTree`,
    `REGISTRY`
    1. If `RDREG` is missing, let `RDREG` be a [=Remote Data Registration=]
        returned by [[#remote-createremotedr]] with inputs: 
        `DRECEIPT registeredShapeTree`, `REGISTRY`
1. Let `RADREG` be an empty [=Remote Agent Data Registration=]
1. Let `RADREG registeredBy` be the current [=Agent=]
1. Let `RADREG registeredWith` be the current [=Application=]
1. Let `RADREG registeredAt` be the current timestamp
1. Let `RADREG updatedAt` be the current timestamp
1. Let `RADREG providedAt` be `RECEIPT providedAt`
1. Let `RADREG hasDataReceipt` be `DRECEIPT`
1. Let `RADREG hasDataRegistration` be `DRECEIPT hasDataRegistration`
1. Let `RADREG registeredShapeTree` be `DRECEIPT registeredShape`
1. Let `RADREG scopeOfGrant`s be `DRECEIPT scopeOfDataGrant`s
1. Let `RADREG accessMode`s be `DRECEIPT accessMode`s
1. If `DRECEIPT scopeOfGrant` is `interop:AllInstances`
    1. Let `RADREG scopeOfGrant` be `interop:AllInstances`
1. If `DRECEIPT scopeOfGrant` is `interop:SelectedInstances`
    AND/OR `interop:InheritInstances`
    1. For each [=Data Instance=] `DI` linked via
        `DRECEIPT hasDataInstance`
        1. Let `RADREG hasRemoteAgentDataInstance` be linked with the
            [=Remote Agent Data Instance=] returned from [[#remote-createremoteadi]]
            with inputs: `RADREG`, `DI`, `DRECEIPT`, `RECEIPT`
1. PUT `RADREG` into the `RDREG` container
1. Link `RADREG` to `RDREG` via `RDREG hasRemoteAgentDataRegistration`
1. Return `RADREG`

</div>

### Create Remote Agent Data Instance ### {#remote-createremoteadi}

<table class="data operation" align="left">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr><th colspan=2>Description</th></tr>
  </thead>
  <tbody>
    <tr>
      <td colspan=2>
      Creates a [=Remote Agent Data Instance=] corresponding with a shared
      [=Data Instance=] `DI`, as part of a given 
      [=Remote Agent Data Registration=] `RADREG`.
      </td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Inputs</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>`RADREG`</td>
      <td>The [=Remote Agent Data Registration=] that the created 
      [=Remote Agent Data Instance=] will be associated with</td>
    </tr>
    <tr>
      <td>`DI`</td>
      <td>The shared [=Data Instance=] that will be associated with 
      the created [=Remote Agent Data Instance=] </td>
    </tr>
    <tr>
      <td>`DRECEIPT`</td>
      <td>The [=Data Receipt=] associated with `RADREG`</td>
    </tr>
    <tr>
      <td>`RECEIPT`</td>
      <td>The [=Access Receipt=] that `DRECEIPT` belongs to</td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Outputs</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>[=Remote Agent Data Instance=]</td>
      <td>Belonging to `RADREG` and associated with `DI`</td>
    </tr>
  </tbody>
</table>

<div class="opdetails">

1. Let `RADI` be an empty [=Remote Data Instance=]
1. Let `RADI registeredAt` be the current timestamp
1. Let `RADI updatedAt` be the current timestamp
1. Let `RADI providedAt` be `RECEIPT providedAt`
1. Let `RADI registeredShapeTree` be `DRECEIPT registeredShapeTree`
1. Let `RADI accessMode`s be `DRECEIPT accessMode`s
1. Let `RADI hasDataReceipt` be `DRECEIPT`
1. Let `RADI hasDataInstance` be `DI`
1. PUT `RADI` into the `RADREG` container
1. Return `RADI`

</div>

### Update Remote Agent Data Registration ### {#remote-updateremoteadr}

<table class="data operation" align="left">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr><th colspan=2>Description</th></tr>
  </thead>
  <tbody>
    <tr>
      <td colspan=2>
      Update an existing [=Remote Agent Data Registration=] `RADREG` 
      based on the contents of a [=Data Receipt=] `DRECEIPT`.
      </td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Inputs</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>`RADREG`</td>
      <td>The [=Remote Agent Data Registration=] to update</td>
    </tr>
    <tr>
      <td>`DRECEIPT`</td>
      <td>The [=Data Receipt=] associated with `REMOTEDR`</td>
    </tr>
    <tr>
      <td>`RECEIPT`</td>
      <td>The [=Access Receipt=] that `DRECEIPT` belongs to</td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Outputs</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>[=Remote Agent Data Registration=]</td>
      <td>Updated based on the contents of [=Data Receipt=]</td>
    </tr>
  </tbody>
</table>

<div class="opdetails">

1. <em class="rfc2119">MUST</em> return error if `RADREG providedAt`
    is later than `RECEIPT providedAt`
1. If `RADREG hasDataReceipt` is not `DRECEIPT`
    1. Let `OLDDRECEIPT` be `RADREG hasDataReceipt`
    1. Let `RADREG hasDataReceipt` be  `DRECEIPT`
    1. Let `RADREG replacedBy` be `DRECEIPT`
    1. Let `RADREG updatedAt` be the current timestamp
1. Let `RADREG accessMode`s be `DRECEIPT accessMode`s
1. If `DRECEIPT scopeOfGrant` is `interop:NoAccess`
    1. Let `RADREG scopeOfGrant` be `interop:NoAccess`
    1. Let `RADREG accessMode` be empty
    1. For each [=Remote Agent Data Instance=] `RADI` linked via
        `RADREG hasRemoteAgentDataInstance`
        1. Delete `RADI`
        1. Remove `RADREG hasRemoteAgentDataInstance` link to `RADI`
1. If `DRECEIPT scopeOfGrant` is `interop:AllInstances`
    1. For each [=Remote Agent Data Instance=] `RADI` linked via
        `RADREG hasRemoteAgentDataInstance`
        1. Delete `RADI`
        1. Remove `RADREG hasRemoteAgentDataInstance` link to `RADI`
1. If `DRECEIPT scopeOfGrant` is `interop:SelectedInstances` or
    `interop:InheritInstances`
    1. For each [=Remote Agent Data Instance=] `RADI` linked via
        `RADREG hasRemoteAgentDataInstance`
        1. Delete `RADI`
        1. Remove `RADREG hasRemoteAgentDataInstance` link to `RADI`
    1. For each [=Data Instance=] `DI` linked via
        `DRECEIPT hasDataInstance`
        1. Let `RADREG hasRemoteAgentDataInstance` be linked with the
            [=Remote Agent Data Instance=] returned from [[#remote-createremoteadi]]
            with inputs: `RADREG`, `DI`, `DRECEIPT`, `RECEIPT`
1. Let `RADREG updatedAt` be the current timestamp
1. Return `RADREG`

</div> 

Issue: It might be more elegant to not wipe out the remote data instances
and recreate them with changes.

Issue: Someone should be able to grant a given [=Agent=] different modes of
access for different selected instances in a given registration.

### Load Remote Agent Data Registration ### {#remote-loadremoteadr}

<table class="data operation" align="left">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr><th colspan=2>Description</th></tr>
  </thead>
  <tbody>
    <tr>
      <td colspan=2>
      Lookup a [=Remote Agent Data Registration=] `RADREG` in a given
      [=Remote Data Registry=] based on the URI of a 
      shared [=Data Registration=].
      </td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Inputs</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>`DATAREG`</td>
      <td>A shared [=Data Registration=] to lookup</td>
    </tr>
    <tr>
      <td>`REGISTRY`</td>
      <td>A [=Remote Data Registry=] to search</td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Outputs</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>[=Remote Agent Data Registration=]</td>
      <td>Corresponding to `DATAREG` in `REGISTRY`</td>
    </tr>
  </tbody>
</table>

<div class="opdetails">

1. For each [=Remote Data Registration=] `RDREG` in `REGISTRY` linked
    via `REGISTRY hasRemoteDataRegistration`    
    1. For each [=Remote Agent Data Registration=] `RADREG` in `RDREG` linked
        via `RDREG hasRemoteAgentDataRegistration`
        1. return `RADREG` if `RADREG hasDataRegistration` == `DATAREG`

</div>

### Create Remote Data Registration ### {#remote-createremotedr}

<table class="data operation" align="left">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr><th colspan=2>Description</th></tr>
  </thead>
  <tbody>
    <tr>
      <td colspan=2>
      Create a [=Remote Data Registration=] for a given [=shape tree=]
      `TREE` in a [=Remote Data Registry=] `REGISTRY`      
      </td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Inputs</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>`TREE`</td>
      <td>The [=shape tree=] for the [=Remote Data Registration=]</td>
    </tr>
    <tr>
      <td>`REGISTRY`</td>
      <td>The [=Remote Data Registry=] for the 
      [=Remote Data Registration=]</td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Outputs</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>[=Remote Data Registration=]</td>
      <td>Corresponding to `TREE` in `REGISTRY`</td>
    </tr>
  </tbody>
</table>

<div class="opdetails">

1. Let `EXISTING` be a [=Remote Data Registration=] returned by 
    [[#remote-loadremotedr]] with inputs: `TREE`,`REGISTRY`
    1. Error if `EXISTING`
1. Let `RDREG` be an empty [=Remote Data Registration=]
1. Let `RDREG registeredShapeTree` be `TREE`
1. PUT `RDREG` into `REGISTRY` container
1. Link `RDREG` to `REGISTRY` via `REGISTRY hasRemoteDataRegistration`
1. Return `RDREG`

</div>

### Load Remote Data Registration ### {#remote-loadremotedr}

<table class="data operation" align="left">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr><th colspan=2>Description</th></tr>
  </thead>
  <tbody>
    <tr>
      <td colspan=2>
      Lookup a [=Remote Data Registration=] for a given [=shape tree=]
      `TREE` in a [=Remote Data Registry=] `REGISTRY`      
      </td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Inputs</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>`TREE`</td>
      <td>The [=shape tree=] for the [=Remote Data Registration=]</td>
    </tr>
    <tr>
      <td>`REGISTRY`</td>
      <td>The [=Remote Data Registry=] to search for a 
      [=Remote Data Registration=]</td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Outputs</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>[=Remote Data Registration=]</td>
      <td>Corresponding to `TREE` in `REGISTRY`</td>
    </tr>
  </tbody>
</table>

<div class="opdetails">

1. For each [=Remote Data Registration=] `RDREG` in `REGISTRY` linked via
    `REGISTRY hasRemoteDataRegistration`
    1. return `RDREG` if `RDREG registeredShapeTree` == `TREE`

</div>
